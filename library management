import java.util.*;

// ========================
// Book Class
// ========================
class Book {
    private String id;
    private String title;
    private String author;
    private boolean isIssued;

    public Book(String id, String title, String author) {
        this.id = id;
        this.title = title;
        this.author = author;
        this.isIssued = false;
    }

    public String getId() { return id; }
    public String getTitle() { return title; }
    public String getAuthor() { return author; }
    public boolean isIssued() { return isIssued; }

    public void issue() { isIssued = true; }
    public void returnBook() { isIssued = false; }

    @Override
    public String toString() {
        return String.format("Book[ID=%s, Title=%s, Author=%s, Issued=%s]",
                id, title, author, (isIssued ? "Yes" : "No"));
    }
}

// ========================
// Member Class
// ========================
class Member {
    private String id;
    private String name;
    private List<Book> borrowedBooks;

    public Member(String id, String name) {
        this.id = id;
        this.name = name;
        this.borrowedBooks = new ArrayList<>();
    }

    public String getId() { return id; }
    public String getName() { return name; }
    public List<Book> getBorrowedBooks() { return borrowedBooks; }

    public void borrowBook(Book book) {
        borrowedBooks.add(book);
        book.issue();
    }

    public void returnBook(Book book) {
        borrowedBooks.remove(book);
        book.returnBook();
    }

    @Override
    public String toString() {
        return String.format("Member[ID=%s, Name=%s, Borrowed=%d]", id, name, borrowedBooks.size());
    }
}

// ========================
// Library Class
// ========================
class Library {
    private Map<String, Book> books;
    private Map<String, Member> members;

    public Library() {
        books = new HashMap<>();
        members = new HashMap<>();
    }

    // --- Book Management ---
    public void addBook(Book book) {
        books.put(book.getId(), book);
        System.out.println("Book added successfully!");
    }

    public void removeBook(String id) {
        if (books.remove(id) != null)
            System.out.println("Book removed successfully!");
        else
            System.out.println("Book not found!");
    }

    public void viewBooks() {
        if (books.isEmpty()) {
            System.out.println("No books in the library.");
            return;
        }
        books.values().forEach(System.out::println);
    }

    // --- Member Management ---
    public void addMember(Member member) {
        members.put(member.getId(), member);
        System.out.println("Member added successfully!");
    }

    public void viewMembers() {
        if (members.isEmpty()) {
            System.out.println("No members found.");
            return;
        }
        members.values().forEach(System.out::println);
    }

    // --- Issue/Return Operations ---
    public void issueBook(String bookId, String memberId) {
        Book book = books.get(bookId);
        Member member = members.get(memberId);

        if (book == null) {
            System.out.println("Book not found!");
            return;
        }
        if (member == null) {
            System.out.println("Member not found!");
            return;
        }
        if (book.isIssued()) {
            System.out.println("Book is already issued!");
            return;
        }

        member.borrowBook(book);
        System.out.println("Book issued successfully to " + member.getName());
    }

    public void returnBook(String bookId, String memberId) {
        Book book = books.get(bookId);
        Member member = members.get(memberId);

        if (book == null || member == null) {
            System.out.println("Invalid book or member ID.");
            return;
        }
        if (!book.isIssued()) {
            System.out.println("This book was not issued.");
            return;
        }

        member.returnBook(book);
        System.out.println("Book returned successfully!");
    }
}

// ========================
// Main Class
// ========================
public class LibraryManagementSystem {
    private static Scanner sc = new Scanner(System.in);
    private static Library library = new Library();

    public static void main(String[] args) {
        int choice;
        do {
            System.out.println("\n===== LIBRARY MANAGEMENT SYSTEM =====");
            System.out.println("1. Add Book");
            System.out.println("2. View Books");
            System.out.println("3. Remove Book");
            System.out.println("4. Add Member");
            System.out.println("5. View Members");
            System.out.println("6. Issue Book");
            System.out.println("7. Return Book");
            System.out.println("0. Exit");
            System.out.print("Enter your choice: ");
            choice = Integer.parseInt(sc.nextLine());

            switch (choice) {
                case 1 -> addBookMenu();
                case 2 -> library.viewBooks();
                case 3 -> removeBookMenu();
                case 4 -> addMemberMenu();
                case 5 -> library.viewMembers();
                case 6 -> issueBookMenu();
                case 7 -> returnBookMenu();
                case 0 -> System.out.println("Exiting system...");
                default -> System.out.println("Invalid choice! Try again.");
            }
        } while (choice != 0);
    }

    private static void addBookMenu() {
        System.out.print("Enter Book ID: ");
        String id = sc.nextLine();
        System.out.print("Enter Book Title: ");
        String title = sc.nextLine();
        System.out.print("Enter Author: ");
        String author = sc.nextLine();
        library.addBook(new Book(id, title, author));
    }

    private static void removeBookMenu() {
        System.out.print("Enter Book ID to remove: ");
        String id = sc.nextLine();
        library.removeBook(id);
    }

    private static void addMemberMenu() {
        System.out.print("Enter Member ID: ");
        String id = sc.nextLine();
        System.out.print("Enter Member Name: ");
        String name = sc.nextLine();
        library.addMember(new Member(id, name));
    }

    private static void issueBookMenu() {
        System.out.print("Enter Book ID: ");
        String bookId = sc.nextLine();
        System.out.print("Enter Member ID: ");
        String memberId = sc.nextLine();
        library.issueBook(bookId, memberId);
    }

    private static void returnBookMenu() {
        System.out.print("Enter Book ID: ");
        String bookId = sc.nextLine();
        System.out.print("Enter Member ID: ");
        String memberId = sc.nextLine();
        library.returnBook(bookId, memberId);
    }
}
